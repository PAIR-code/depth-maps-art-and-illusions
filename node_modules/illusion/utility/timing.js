function Timing(measure) {
    this.measure = measure || false;
}

Timing.prototype.waitStart = function(func, interval, timeout, success, fail) {
    var self = this;
    var startTime = Date.now();
    var timer = setInterval(function() {
        var delta = Date.now() - startTime;
        if (delta > timeout) {
            clearInterval(timer);
            return fail && fail();
        } else {
            func(function() {
                if (self.measure) {
                    console.log('it waits ' + delta / 1000 + 's');
                }
                clearInterval(timer);
                return success && success.apply(this, arguments);
            });
        }
    }, interval);
};

Timing.prototype.waitFinish = function(func, timeout, success, fail) {
    var self = this;
    if (this.measure) {
        var startTime = Date.now();
    }
    var timer;
    var next = function() {
        if (self.measure) {
            var delta = Date.now() - startTime;
            console.log('it runs ' + delta / 1000 + 's');
        }
        done = true;
        if (timer) {
            clearTimeout(timer);
        }
        return success && success.apply(this, arguments);
    };
    var done = false;
    if (timeout > 0) {
        timer = setTimeout(function() {
            if (!done) {
                next = undefined;
                return fail && fail();
            }
        }, timeout);
    }
    func(function() {
        return next && next.apply(this, arguments);
    });
};

module.exports = Timing;
