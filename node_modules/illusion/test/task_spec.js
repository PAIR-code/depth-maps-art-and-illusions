var Task = require('../illusion/task');
var Step = require('../illusion/step');

describe('Task specs', function() {
    var phantom = {
        createWebPage: function(next) {
            setTimeout(next, 100);
            var page = {
                open: function(url, next) {
                    next(null, 'success');
                },
                close: function(next) {
                    next();
                }
            };
            return page;
        }
    };
    it('should support run one step', function(done) {
        var task = new Task(phantom);
        var step = new Step('Step');
        step.action = function(next) {
            next(null, 1, 2, 3);
        };
        task.addStep(step);
        task.run(function(err, a, b, c) {
            expect(task.status).toEqual('success');
            expect(step.status).toEqual('success');
            expect(a).toEqual(1);
            expect(b).toEqual(2);
            expect(c).toEqual(3);
            done();
        });
    });
    it('should support run two connected steps', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        step1.action = function(next) {
            next(null, 1, 2, 3);
        };
        step2.action = function(next) {
            next(null, 4, 5, 6);
        };
        task.addStep(step1);
        task.addStep(step2, 'Step1');
        task.run(function(err, a, b, c) {
            expect(task.status).toEqual('success');
            expect(step1.status).toEqual('success');
            expect(step2.status).toEqual('success');
            expect(a).toEqual(4);
            expect(b).toEqual(5);
            expect(c).toEqual(6);
            done();
        });
    });
    it('should support run three connected steps', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        step1.action = function(next) {
            next(null, 1, 2, 3);
        };
        step2.action = function(next) {
            next(null, 4, 5, 6);
        };
        step3.action = function(next) {
            next(null, 7, 8, 9);
        };
        task.addStep(step1);
        task.addStep(step2, 'Step1');
        task.addStep(step3, 'Step1');
        var once = 0;
        task.run(function() {
            once++;
            expect(once).toEqual(1);
            expect(task.status).toEqual('success');
            expect(step1.status).toEqual('success');
            expect(step2.status).toEqual('success');
            expect(step3.status).toEqual('success');
            done();
        });
    });
    it('should support run four connected steps', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        var step4 = new Step('Step4');
        step1.action = function(next) {
            next(null, 1, 2, 3);
        };
        step2.action = function(next) {
            next(null, 4, 5, 6);
        };
        step3.action = function(next) {
            next(null, 7, 8, 9);
        };
        step4.action = function(next) {
            next(null, 10, 11, 12);
        };
        task.addStep(step1);
        task.addStep(step2, 'Step1');
        task.addStep(step3, 'Step1');
        task.addStep(step4, [ 'Step2', 'Step3' ]);
        task.run(function(err, a, b, c) {
            expect(task.status).toEqual('success');
            expect(step1.status).toEqual('success');
            expect(step2.status).toEqual('success');
            expect(step3.status).toEqual('success');
            expect(step4.status).toEqual('success');
            expect(a).toEqual(10);
            expect(b).toEqual(11);
            expect(c).toEqual(12);
            done();
        });
    });
    it('should support run three connected steps failed', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        step1.action = function(next) {
            next(new Error('Failed'));
        };
        step2.action = function(next) {
            next(null, 1, 2, 3);
        };
        step3.action = function(next) {
            next(null, 1, 2, 3);
        };
        task.addStep(step1);
        task.addStep(step2);
        task.addStep(step3, [ 'Step1', 'Step2' ]);
        task.run(function(err) {
            expect(task.status).toEqual('failed');
            expect(err.message).toEqual('Failed');
            done();
        });
    });
    it('should support run three connected steps timeout', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        step1.timeout = 100;
        step1.action = function(next) {
        };
        step2.action = function(next) {
            next(null, 1, 2, 3);
        };
        step3.action = function(next) {
            next(null, 1, 2, 3);
        };
        task.addStep(step1);
        task.addStep(step2);
        task.addStep(step3, [ 'Step1', 'Step2' ]);
        task.run(function(err) {
            expect(task.status).toEqual('timeout');
            expect(err.message).toEqual('Timeout');
            done();
        });
    });
    it('should support reset three connected steps', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        step1.action = function(next) {
            next(null, 1, 2, 3);
        };
        step2.action = function(next) {
            next(null, 1, 2, 3);
        };
        step3.action = function(next) {
            next(null, 1, 2, 3);
        };
        task.addStep(step1);
        task.addStep(step2);
        task.addStep(step3, [ 'Step1', 'Step2' ]);
        task.run(function() {
            task.reset(function() {
                expect(task.status).toEqual('idle');
                expect(step1.status).toEqual('idle');
                expect(step2.status).toEqual('idle');
                expect(step3.status).toEqual('idle');
                done();
            });
        });
    });
    it('should support run three connected steps twice', function(done) {
        var task = new Task(phantom);
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        step1.action = function(next) {
            next(null, 1, 2, 3);
        };
        step2.action = function(next) {
            next(null, 4, 5, 6);
        };
        step3.action = function(next) {
            next(null, 7, 8, 9);
        };
        task.addStep(step1);
        task.addStep(step2);
        task.addStep(step3, [ 'Step1', 'Step2' ]);
        task.run(function() {
            task.run(function() {
                expect(task.status).toEqual('success');
                expect(step1.status).toEqual('success');
                expect(step2.status).toEqual('success');
                expect(step3.status).toEqual('success');
                done();
            });
        });
    });
    it('should support verify result', function(done) {
        var task = new Task(phantom);
        var step = new Step('Step');
        step.action = function(next) {
            next(null, 1, 2, 3);
        };
        step.toBeEqual([1, 2, 3]);
        task.addStep(step);
        task.run(function(err, a, b, c) {
            expect(task.status).toEqual('success');
            expect(step.status).toEqual('success');
            expect(a).toEqual(1);
            expect(b).toEqual(2);
            expect(c).toEqual(3);
            done();
        });
    });
    it('should support verify result failed', function(done) {
        var task = new Task(phantom);
        var step = new Step('Step');
        step.action = function(next) {
            next(null, 1, 2, 3);
        };
        step.toBeEqual([1, 2, 4]);
        task.addStep(step);
        task.run(function(err) {
            expect(task.status).toEqual('failed');
            expect(step.status).toEqual('failed');
            expect(err.message).toContain('Result not as expect');
            done();
        });
    });
});