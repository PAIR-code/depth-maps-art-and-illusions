var Step = require('../illusion/step');

describe('Step specs', function() {
    it('should support connect/disconnect', function() {
        var step1 = new Step('Step1');
        var step2 = new Step('Step2');
        var step3 = new Step('Step3');
        var step4 = new Step('Step4');
        step2.connect(step1);
        step3.connect(step1);
        step4.connect(step2);
        step4.connect(step3);
        expect(step2.prevSteps.indexOf(step1)).not.toEqual(-1);
        expect(step3.prevSteps.indexOf(step1)).not.toEqual(-1);
        expect(step1.nextSteps.indexOf(step2)).not.toEqual(-1);
        expect(step1.nextSteps.indexOf(step3)).not.toEqual(-1);
        expect(step4.prevSteps.indexOf(step2)).not.toEqual(-1);
        expect(step4.prevSteps.indexOf(step3)).not.toEqual(-1);
        expect(step2.nextSteps.indexOf(step4)).not.toEqual(-1);
        expect(step3.nextSteps.indexOf(step4)).not.toEqual(-1);
    });

    it('should support start action and fire success event', function(done) {
        var step = new Step('Step');
        step.action = function(next) {
            setTimeout(function() {
                next(null, 1, 2, 3);
            }, 100);
        };
        step.on('success', function(a, b, c) {
            expect(step.status).toEqual('success');
            expect(a).toEqual(1);
            expect(b).toEqual(2);
            expect(c).toEqual(3);
            done();
        });
        step.run();
    });
    it('should support start action and fire failed event', function(done) {
        var step = new Step('Step');
        step.action = function(next) {
            setTimeout(function() {
                next(new Error('Failed'));
            }, 100);
        };
        step.on('failed', function(err) {
            expect(step.status).toEqual('failed');
            expect(err.message).toEqual('Failed');
            done();
        });
        step.run();
    });
    it('should support start action and fire timeout event', function(done) {
        var step = new Step('Step');
        step.timeout = 100;
        step.action = function(next) {
            setTimeout(function() {
                next(1, 2, 3);
            }, 200);
        };
        step.on('timeout', function(err) {
            expect(step.status).toEqual('timeout');
            done();
        });
        step.run();
    });
    it('should support start action and callback success result', function(done) {
        var step = new Step('Step');
        step.action = function(next) {
            setTimeout(function() {
                next(null, 1, 2, 3);
            }, 100);
        };
        step.run(function(err, a, b, c) {
            expect(step.status).toEqual('success');
            expect(err).toEqual(null);
            expect(a).toEqual(1);
            expect(b).toEqual(2);
            expect(c).toEqual(3);
            done();
        });
    });
    it('should support start action and callback failed result', function(done) {
        var step = new Step('Step');
        step.action = function(next) {
            setTimeout(function() {
                next(new Error('Failed'));
            }, 100);
        };
        step.run(function(err) {
            expect(step.status).toEqual('failed');
            expect(err.message).toEqual('Failed');
            done();
        });
    });
    it('should support start action and callback timeout result', function(done) {
        var step = new Step('Step');
        step.timeout = 100;
        step.action = function(next) {
            setTimeout(function() {
                next(1, 2, 3);
            }, 200);
        };
        step.run(function(err) {
            expect(step.status).toEqual('timeout');
            expect(err.message).toEqual('Timeout');
            done();
        });
    });
    it('should support test condition and fire success event', function(done) {
        var step = new Step('Step');
        step.timeout = 200;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                next(null, self.retryTimes);
            }, 120);
        };
        step.on('success', function(retryTimes) {
            expect(step.status).toEqual('success');
            expect(retryTimes).toEqual(3);
            done();
        });
        step.run();
    });
    it('should support test condition and fire failed event', function(done) {
        var step = new Step('Step');
        step.timeout = 200;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                next(new Error('Failed'));
            }, 120);
        };
        step.on('failed', function(err) {
            expect(step.status).toEqual('failed');
            expect(err.message).toEqual('Failed');
            done();
        });
        step.run();
    });
    it('should support test condition and fire timeout event', function(done) {
        var step = new Step('Step');
        step.timeout = 100;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                next(self.retryTimes);
            }, 200);
        };
        step.on('timeout', function() {
            expect(step.status).toEqual('timeout');
            done();
        });
        step.run();
    });
    it('should support test condition and callback success result', function(done) {
        var step = new Step('Step');
        step.timeout = 200;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                next(null, self.retryTimes);
            }, 120);
        };
        step.run(function(err, retryTimes) {
            expect(step.status).toEqual('success');
            expect(err).toEqual(null);
            expect(retryTimes === 3);
            done();
        });
    });
    it('should support test condition and callback failed result', function(done) {
        var step = new Step('Step');
        step.timeout = 200;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                if (self.retryTimes > 0) {
                    next(new Error('Failed'));
                }
            }, 100);
        };
        step.run(function(err, retryTimes) {
            expect(step.status).toEqual('failed');
            expect(err.message).toEqual('Failed');
            done();
        });
    });
    it('should support test condition and callback timeout result', function(done) {
        var step = new Step('Step');
        step.timeout = 100;
        step.retryInterval = 50;
        step.retryTimes = 0;
        step.condition = function(next) {
            var self = this;
            this.retryTimes++;
            setTimeout(function() {
                next(self.retryTimes);
            }, 200);
        };
        step.run(function(err) {
            expect(step.status).toEqual('timeout');
            expect(err.message).toEqual('Timeout');
            done();
        });
    });
});