var webPage = require('webpage');

function WebPageManager() {
    this.webPages = {};
}

WebPageManager.prototype.handleRequest = function(req, res) {
    var pageID = req.url.replace(/\//g, '');
    switch (req.post.command) {
    case 'Page.Create':
        var page = webPage.create();
        this.setupCallback(page, pageID);
        this.webPages[pageID] = page;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.Open':
        page = this.webPages[pageID];
        var data = req.post.data;
        if (typeof data === 'undefined') {
            page.open(req.post.url, req.post.method, function(status) {
            	res.setHeader('content-type', 'text/plain');
                res.statusCode = 200;
                res.write(status);
                res.close();
            });
        } else {
            page.open(req.post.url, req.post.method, data, function(status) {
            	res.setHeader('content-type', 'text/plain');
                res.statusCode = 200;
                res.write(status);
                res.close();
            });
        }
        break;
    case 'Page.Close':
        this.webPages[pageID].close();
        delete this.webPages[pageID];
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.GetTitle':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write(page.title);
        res.close();
        break;
    case 'Page.GetURL':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write(page.url);
        res.close();
        break;
    case 'Page.GetContent':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write(page.content);
        res.close();
        break;
    case 'Page.AddCookies':
        page = this.webPages[pageID];
        var cookies = JSON.parse(req.post.cookies);
        if (!Array.isArray(cookies)) {
            cookies = [ cookies ];
        }
        var result = false;
        cookies.forEach(function(cookie) {
            result = page.addCookie(cookie) || result;
        });
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Page.RemoveCookies':
        page = this.webPages[pageID];
        var cookieNames = JSON.parse(req.post.cookieNames);
        if (!Array.isArray(cookieNames)) {
            cookieNames = [ cookieNames ];
        }
        result = false;
        cookieNames.forEach(function(cookieName) {
            result = page.deleteCookie(cookieName) || result;
        });
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Page.GetCookies':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(page.cookies));
        res.close();
        break;
    case 'Page.ClearCookies':
        page = this.webPages[pageID];
        page.clearCookies();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.IncludeJS':
        page = this.webPages[pageID];
        page.includeJs(req.post.url);
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.InjectJS':
        page = this.webPages[pageID];
        result = page.injectJs(req.post.fileName);
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Page.CanGoBack':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(page.canGoBack));
        res.close();
        break;
    case 'Page.CanGoForward':
        page = this.webPages[pageID];
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(page.canGoForward));
        res.close();
        break;
    case 'Page.GoBack':
        page = this.webPages[pageID];
        page.goBack();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.GoForward':
        page = this.webPages[pageID];
        page.goForward();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.Reload':
        page = this.webPages[pageID];
        page.reload();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.Stop':
        page = this.webPages[pageID];
        page.stop();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.SendMouseEvent':
        page = this.webPages[pageID];
        var button = req.post.button;
        if (typeof button === 'undefined') {
            page.sendEvent(req.post.eventType, req.post.mouseX, req.post.mouseY);
        } else {
            page.sendEvent(req.post.eventType, req.post.mouseX, req.post.mouseY, button);
        }
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.SendKeyboardEvent':
        page = this.webPages[pageID];
        var modifier = req.post.modifier;
        if (typeof modifier === 'undefined') {
            page.sendEvent(req.post.eventType, req.post.keys);
        } else {
            page.sendEvent(req.post.eventType, req.post.keys, null, null, modifier);
        }
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.Evaluate':
        page = this.webPages[pageID];
        var args = req.post.args;
        if (typeof args === 'undefined') {
            result = page.evaluate(req.post.func);
        } else {
            result = page.evaluate(req.post.func, JSON.parse(args));
        }
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Page.EvaluateAsync':
        page = this.webPages[pageID];
        args = req.post.args;
        if (typeof args === 'undefined') {
            page.evaluateAsync(req.post.func);
        } else {
            page.evaluateAsync(req.post.func, JSON.parse(args));
        }
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.SetConfirmCallback':
        page = this.webPages[pageID];
        page.confirmCallbacks[req.post.message] = req.post.accept;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Page.SetPromptCallback':
        page = this.webPages[pageID];
        page.promptCallbacks[req.post.message] = req.post.value;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    default:
        break;
    }
};

WebPageManager.prototype.setupCallback = function(page, pageID) {
    page.confirmCallbacks = {};
    page.promptCallbacks = {};
    page.onNavigationRequested = function(url, type, willNavigate, main) {
        var data = {
            pageID: pageID,
            event: 'Page.NavigationRequested',
            url: url,
            type: type,
            willNavigate: willNavigate,
            main: main
        };
        console.log(JSON.stringify(data));
    };
    page.onUrlChanged = function(targetURL) {
        var data = {
            pageID: pageID,
            event: 'Page.URLChanged',
            targetURL: targetURL
        };
        console.log(JSON.stringify(data));
    };
    page.onLoadStarted = function() {
        var data = {
            pageID: pageID,
            event: 'Page.LoadStarted'
        };
        console.log(JSON.stringify(data));
    };
    page.onLoadFinished = function(status) {
        var data = {
            pageID: pageID,
            event: 'Page.LoadFinished',
            status: status
        };
        console.log(JSON.stringify(data));
    };
    page.onInitialized = function() {
        var data = {
            pageID: pageID,
            event: 'Page.Initialized'
        };
        console.log(JSON.stringify(data));
    };
    page.onClosing = function(page) {
        var data = {
            pageID: pageID,
            event: 'Page.Closing',
            url: page.url,
            title: page.title
        };
        console.log(JSON.stringify(data));
    };
    page.onConsoleMessage = function(msg, lineNum, sourceID) {
        var data = {
            pageID: pageID,
            event: 'Page.ConsoleMessage',
            message: msg,
            lineNum: lineNum,
            sourceID: sourceID
        };
        console.log(JSON.stringify(data));
    };
    page.onError = function(msg, trace) {
        var data = {
            pageID: pageID,
            event: 'Page.Error',
            message: msg,
            trace: trace
        };
        console.log(JSON.stringify(data));
    };
    page.onAlert = function(msg) {
        var data = {
            pageID: pageID,
            event: 'Page.Alert',
            message: msg
        };
        console.log(JSON.stringify(data));
    };
    page.onConfirm = function(msg) {
        if (page.confirmCallbacks.hasOwnProperty(msg)) {
            return page.confirmCallbacks[msg];
        }
        return false;
    };
    page.onPrompt = function(msg) {
        if (page.promptCallbacks.hasOwnProperty(msg)) {
            return page.promptCallbacks[msg];
        }
        return null;
    };
};

module.exports = WebPageManager;