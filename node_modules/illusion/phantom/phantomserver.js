var webServer = require('webserver');
var WebPageManager = require('./webpagemanager');

function PhantomServer() {
    phantom.onError = function(msg, trace) {
        var stack = [ 'Phantom Error: ' + msg ];
        if (trace && trace.length) {
            stack.push('Trace: ');
            trace.forEach(function(tr) {
                var src = tr.file || tr.sourceURL;
                var func = tr.function ? ' (in function ' + tr.function + ')' : '';
                stack.push(' -> ' + src + ': ' + tr.line + func);
            });
        }
        console.error(stack.join('\n'));
        phantom.exit(1);
    };
    this.server = webServer.create();
    this.webPageManager = new WebPageManager();
}

PhantomServer.prototype.start = function(port) {
    var self = this;
    this.server.listen(port, function(req, res) {
        if (req.url === '/') {
            self.handleRequest(req, res);
        } else {
            self.webPageManager.handleRequest(req, res);
        }
    });
    var data = { event: 'Phantom.Ready' };
    console.log(JSON.stringify(data));
};

PhantomServer.prototype.handleRequest = function(req, res) {
    switch (req.post.command) {
    case 'Phantom.Exit':
        this.server.close();
        phantom.exit();
        break;
    case 'Phantom.GetVersion':
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(phantom.version));
        res.close();
        break;
    case 'Phantom.EnableCookies':
        phantom.cookiesEnabled = true;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Phantom.DisableCookies':
        phantom.cookiesEnabled = false;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Phantom.IsCookiesEnabled':
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(phantom.cookiesEnabled));
        res.close();
        break;
    case 'Phantom.AddCookies':
        var cookies = JSON.parse(req.post.cookies);
        if (!Array.isArray(cookies)) {
            cookies = [ cookies ];
        }
        var result = false;
        cookies.forEach(function(cookie) {
            result = phantom.addCookie(cookie) || result;
        });
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Phantom.RemoveCookies':
        var cookieNames = JSON.parse(req.post.cookieNames);
        if (!Array.isArray(cookieNames)) {
            cookieNames = [ cookieNames ];
        }
        result = false;
        cookieNames.forEach(function(cookieName) {
            result = phantom.deleteCookie(cookieName) || result;
        });
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    case 'Phantom.GetCookies':
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(phantom.cookies));
        res.close();
        break;
    case 'Phantom.ClearCookies':
        phantom.clearCookies();
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Phantom.SetLibraryPath':
        phantom.libraryPath = req.post.path;
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write('done');
        res.close();
        break;
    case 'Phantom.GetLibraryPath':
        res.setHeader('content-type', 'text/plain');
        res.statusCode = 200;
        res.write(phantom.libraryPath);
        res.close();
        break;
    case 'Phantom.InjectJS':
        result = phantom.injectJs(req.post.fileName);
        res.setHeader('content-type', 'text/json');
        res.statusCode = 200;
        res.write(JSON.stringify(result));
        res.close();
        break;
    default:
        break;
    }
};

module.exports = PhantomServer;