var path = require('path');
var childProcess = require('child_process');
var StringDecoder = require('string_decoder');
var PhantomRequest = require('./phantomrequest');
var WebPage = require('./webpage');
var WebPageListener = require('./webpagelistener');

var decoder = new StringDecoder.StringDecoder('utf-8');

function Phantom() {
    var self = this;
    this.phantomRequest = new PhantomRequest(1129);
    this.webPageListener = new WebPageListener();
}

Phantom.prototype.open = function(next) {
    var self = this;
    var modPath = require.resolve('phantomjs');
    var relPath = path.relative(process.cwd(), modPath);
    var exePath = relPath.replace(/lib\/phantomjs.js$/, 'bin/phantomjs');
    var argPath = 'phantom/loader.js';
    try {
        modPath = require.resolve('illusion');
        relPath = path.relative(process.cwd(), modPath);
        argPath = relPath.replace(/index.js$/, argPath);
    } catch (e) {}
    this.phantomJS = childProcess.spawn(exePath, [ argPath ]);
    this.shutdown = function(err) {
        if (err) {
            console.error(err.stack);
        }
        if (self.phantomJS) {
            console.log('Phantom.Kill');
            self.phantomJS.kill();
            self.phantomJS = undefined;
        }
        process.exit(1);
    };
    process.once('uncaughtException', this.shutdown);
    process.once('SIGTERM', this.shutdown);
    process.once('SIGINT', this.shutdown);
    this.phantomJS.stdout.on('data', function(data) {
        data = decoder.write(data);
        data = data.replace(/\n$/, '');
        array = data.split('\n');
        array.forEach(function(data) {
            //console.log(data);
        	try {
                data = JSON.parse(data);
            } catch (e) {}
            if (data.event === 'Phantom.Ready') {
                return next && next();
            }
            self.webPageListener.on(data);
        });
    });
    this.phantomJS.stderr.on('data', function(data) {
        //console.log('PhantomJS StdErr');
        data = decoder.write(data);
        data = data.replace(/\n$/, '');
        console.error(data);
        self.close();
    });
    this.phantomJS.once('error', this.shutdown);
    this.phantomJS.once('exit', function() {
        //console.log('Phantom Exit');
    });
};

Phantom.prototype.close = function(next) {
    if (this.phantomJS) {
        var self = this;
        this.phantomJS.once('close', function() {
            self.phantomJS = undefined;
            process.removeListener('uncaughtException', self.shutdown);
            process.removeListener('SIGTERM', self.shutdown);
            process.removeListener('SIGINT', self.shutdown);
            return next && next();
        });
        this.phantomRequest.post('Phantom.Exit');
    } else {
        return next && next();
    }
};

Phantom.prototype.getVersion = function(next) {
    this.phantomRequest.post('Phantom.GetVersion', next);
};

Phantom.prototype.enableCookies = function(next) {
    this.phantomRequest.post('Phantom.EnableCookies', next);
};

Phantom.prototype.disableCookies = function(next) {
    this.phantomRequest.post('Phantom.DisableCookies', next);
};

Phantom.prototype.isCookiesEnabled = function(next) {
    this.phantomRequest.post('Phantom.IsCookiesEnabled', next);
};

Phantom.prototype.addCookies = function(cookies, next) {
    this.phantomRequest.post('Phantom.AddCookies', { cookies: JSON.stringify(cookies) }, next);
};

Phantom.prototype.removeCookies = function(cookieNames, next) {
    this.phantomRequest.post('Phantom.RemoveCookies', { cookieNames: JSON.stringify(cookieNames) }, next);
};

Phantom.prototype.getCookies = function(next) {
    this.phantomRequest.post('Phantom.GetCookies', next);
};

Phantom.prototype.clearCookies = function(next) {
    this.phantomRequest.post('Phantom.ClearCookies', next);
};

Phantom.prototype.setLibraryPath = function(path, next) {
    this.phantomRequest.post('Phantom.SetLibraryPath', { path: path }, next);
};

Phantom.prototype.getLibraryPath = function(next) {
    this.phantomRequest.post('Phantom.GetLibraryPath', next);
};

Phantom.prototype.injectJS = function(fileName, next) {
    this.phantomRequest.post('Phantom.InjectJS', { fileName: fileName }, next);
};

Phantom.prototype.createWebPage = function(next) {
    var webPage = new WebPage();
    this.webPageListener.register(webPage);
    webPage.create(next);
    return webPage;
};

module.exports = Phantom;