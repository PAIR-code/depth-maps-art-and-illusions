var events = require('events');
var util = require('util');
var Step = require('./step');

function Task(phantom, url) {
    this.phantom = phantom;
    this.url = url;
    this.status = 'idle';
    this.steps = {};
    this.context = {};
}

util.inherits(Task, events.EventEmitter);

Task.prototype.getStep = function(stepName) {
    return this.steps[stepName];
};

Task.prototype.run = function(next) {
    var self = this;
    if (this.page) {
        this.runRootSteps(next);
    } else {
        this.page = this.phantom.createWebPage(function(err) {
            if (err) {
                self.status = 'failed';
                self.emit('failed', err);
                return next && next(err);
            }
            self.page.open(self.url, function(err, status) {
                if (err) {
                    self.status = 'failed';
                    self.emit('failed', err);
                    return next && next(err);
                }
                if (status !== 'success') {
                    err = new Error('Failed to open: ' + self.url);
                    self.emit('failed', err);
                    return next && next(err);
                }
                self.runRootSteps(next);
            });
        });
    }
};

Task.prototype.runOnce = function(next) {
    var self = this;
    this.run(function(err) {
        if (err) {
            return next && next(err);
        }
        self.reset(next);
    });
};

Task.prototype.reset = function(next) {
    var self = this;
    if (this.status === 'idle') {
        return next && next();
    }
    var firstSteps = [];
    var i, step;
    for (i in this.steps) {
        step = this.steps[i];
        if (step.prevSteps.length === 0) {
            firstSteps.push(step);
        }
    }
    var num = firstSteps.length;
    var done = function() {
        if (--num === 0) {
            self.page.close(function() {
                self.status = 'idle';
                self.page = undefined;
                self.emit('idle');
                return next && next();
            });
        }
    };
    for (i in firstSteps) {
        step = firstSteps[i];
        this.resetStep(step, done);
    }
};

Task.prototype.addStep = function(step, depends) {
    var self = this;
    this.steps[step.name] = step;
    if (depends) {
        if (typeof depends === 'string') {
            depends = [ depends ];
        }
        depends.forEach(function(stepName) {
            step.connect(self.steps[stepName]);
        });
    }
};

Task.prototype.wait = function(name, time, depends) {
    var step = new Step(name);
    step.action = function(next) {
        setTimeout(next, time);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.openPage = function(name, url, timeout, depends) {
    var self = this;
    if (typeof timeout !== 'number') {
        depends = timeout;
        timeout = 5 * 1000;
    }
    var step = new Step(name);
    step.timeout = timeout;
    step.action = function(next) {
        self.page.open(url, function(err, status) {
            if (err) {
                next(err);
            } else if (status !== 'success') {
                next(new Error('Failed to open: ' + url));
            } else {
                next(null, status);
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getURL = function(name, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getURL(function(err, url) {
            if (err) {
                next(err);
            } else {
                self.page.url = url;
                next(null, url);
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getTitle = function(name, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getTitle(function(err, title) {
            if (err) {
                next(err);
            } else {
                self.page.title = title;
                next(null, title);
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getContent = function(name, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getContent(function(err, content) {
            if (err) {
                next(err);
            } else {
                self.page.content = content;
                next(null, content);
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.goBack = function(name, timeout, depends) {
    var self = this;
    if (typeof timeout !== Number) {
        depends = timeout;
        timeout = 5 * 1000;
    }
    var step = new Step(name);
    step.timeout = timeout;
    step.action = function(next) {
        self.page.goBack(function(err, result) {
            if (err) {
                next(err);
            } else {
                self.page.once('Page.URLChanged', function(targetURL) {
                    next(null, targetURL);
                });
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.goForward = function(name, timeout, depends) {
    var self = this;
    if (typeof timeout !== Number) {
        depends = timeout;
        timeout = 5 * 1000;
    }
    var step = new Step(name);
    step.timeout = timeout;
    step.action = function(next) {
        self.page.goForward(function(err, result) {
            if (err) {
                next(err);
            } else {
                self.page.once('Page.URLChanged', function(targetURL) {
                    next(null, targetURL);
                });
            }
        });
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getHTML = function(name, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getHTML(next);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getTextContent = function(name, selector, type, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getTextContent(selector, type, next);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getAttribute = function(name, selector, type, attr, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getAttribute(selector, type, attr, next);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.getTable = function(name, selector, type, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.getTable(selector, type, next);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.hasElement = function(name, selector, type, depends) {
    var self = this;
    var step = new Step(name);
    step.action = function(next) {
        self.page.hasElement(selector, type, next);
    };
    this.addStep(step, depends);
    return step;
};

Task.prototype.clickElement = function(name, selector, type, redirect, timeout, depends) {
    var self = this;
    if (typeof redirect !== 'boolean') {
        depends = redirect;
        redirect = true;
    } else if (typeof timeout !== Number) {
        depends = timeout;
        timeout = 5 * 1000;
    }
    var step = new Step(name);
    step.timeout = timeout;
    if (redirect) {
        step.action = function(next) {
            self.page.clickElement(selector, type, function(err, result) {
                if (err) {
                    next(err);
                } else {
                    self.page.once('Page.URLChanged', function(targetURL) {
                        next(null, targetURL);
                    });
                }
            });
        };
    } else {
        step.action = function(next) {
            self.page.clickElement(selector, type, next);
        };
    }
    this.addStep(step, depends);
    return step;
};

Task.prototype.submitForm = function(name, selector, type, data, redirect, timeout, depends) {
    var self = this;
    if (typeof redirect !== 'boolean') {
        depends = redirect;
        redirect = true;
    } else if (typeof timeout !== Number) {
        depends = timeout;
        timeout = 5 * 1000;
    }
    var step = new Step(name);
    step.timeout = timeout;
    if (redirect) {
        step.action = function(next) {
            self.page.submitForm(selector, type, data, function(err, result) {
                if (err) {
                    next(err);
                } else if (!result) {
                    next(new Error('Failed to submit form'));
                } else {
                    self.page.once('Page.URLChanged', function(targetURL) {
                        next(null, targetURL);
                    });
                }
            });
        };
    } else {
        step.action = function(next) {
            self.page.submitForm(selector, type, data, function(err, result) {
                if (err) {
                    next(err);
                } else if (!result) {
                    next(new Error('Failed to submit form'));
                } else {
                    next(null, result);
                }
            });
        };
    }
    this.addStep(step, depends);
    return step;
};

Task.prototype.runRootSteps = function(next) {
    var self = this;
    var callback = function() {
        if (!arguments[0]) {
            self.status = 'success';
        } else if (arguments[0].message == 'Timeout') {
            self.status = 'timeout';
        } else {
            self.status = 'failed'; 
        }
        next.apply(self, arguments);
    };
    for (var i in this.steps) {
        var step = this.steps[i];
        if (step.prevSteps.length === 0) {
            this.runStep(step, callback);
        }
    }
};

Task.prototype.runStep = function(step, next) {
    var self = this;
    step.run(function() {
        if (arguments[0]) {
            self.emit('failed', arguments[0]);
            return next && next(arguments[0]);
        }
        var i;
        if (step.nextSteps.length === 0) {
            for (i in self.steps) {
                if (self.steps.hasOwnProperty(i)) {
                    if (self.steps[i].status !== 'success') {
                        return;
                    }
                }
            }
            var args = Array.prototype.slice.call(arguments);
            self.emit.apply(self, ['success'].concat(args.slice(1)));
            return next && next.apply(self, arguments);
        }
        for (i in step.nextSteps) {
            var nextStep = step.nextSteps[i];
            var status = 'success';
            for (var j in nextStep.prevSteps) {
                var prevStep = nextStep.prevSteps[j];
                if (prevStep.status !== 'success') {
                    status = prevStep.status;
                    break;
                }
            }
            if (status === 'success') {
                self.runStep(nextStep, next);
            }
        }
    });
};

Task.prototype.resetStep = function(step, next) {
    var self = this;
    var reset = function() {
        self.resetStep(step, next);
    };
    var status = 'idle';
    for (var i in step.nextSteps) {
        var nextStep = step.nextSteps[i];
        if (nextStep.status !== 'idle') {
            status = nextStep.status;
            self.resetStep(nextStep, reset);
            break;
        }
    }
    if (status === 'idle') {
        step.reset(next);
    }
};

module.exports = Task;
