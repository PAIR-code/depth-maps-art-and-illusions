var events = require('events');
var util = require('util');
var uuid = require('uuid');
var PhantomRequest = require('./phantomrequest');

function WebPage() {
    this.pageID = uuid.v4();
    this.phantomRequest = new PhantomRequest(1129, this.pageID);
    this.isOpen = false;
}

util.inherits(WebPage, events.EventEmitter);

WebPage.prototype.create = function(next) {
    this.phantomRequest.post('Page.Create', next);
};

WebPage.prototype.open = function(url, method, data, next) {
    var self = this;
    var param = { url: url };
    if (typeof method === 'object') {
        next = data;
        param.method = 'GET';
        param.data = JSON.stringify(method);
    } else if (typeof method === 'function') {
        next = method;
        param.method = 'GET';
    } else if (typeof data === 'function') {
        next = data;
        param.method = method;
    } else {
        param.method = method;
        param.data = JSON.stringify(data);
    }
    this.phantomRequest.post('Page.Open', param, function(err, status) {
        self.isOpen = true;
        return next && next(err, status);
    });
};

WebPage.prototype.close = function(next) {
    if (!this.isOpen) {
        return next && next();
    }
    var self = this;
    this.phantomRequest.post('Page.Close', function(err, result) {
        self.isOpen = false;
        return next && next(err, result);
    });
};

WebPage.prototype.getTitle = function(next) {
    this.phantomRequest.post('Page.GetTitle', next);
};

WebPage.prototype.getURL = function(next) {
    this.phantomRequest.post('Page.GetURL', next);
};

WebPage.prototype.getContent = function(next) {
    this.phantomRequest.post('Page.GetContent', next);
};

WebPage.prototype.addCookies = function(cookies, next) {
    this.phantomRequest.post('Page.AddCookies', { cookies: JSON.stringify(cookies) }, next);
};

WebPage.prototype.removeCookies = function(cookieNames, next) {
    this.phantomRequest.post('Page.RemoveCookies', { cookieNames: JSON.stringify(cookieNames) }, next);
};

WebPage.prototype.getCookies = function(next) {
    this.phantomRequest.post('Page.GetCookies', next);
};

WebPage.prototype.clearCookies = function(next) {
    this.phantomRequest.post('Page.ClearCookies', next);
};

WebPage.prototype.includeJS = function(url, next) {
    this.phantomRequest.post('Page.IncludeJS', { url: url }, next);
};

WebPage.prototype.injectJS = function(fileName, next) {
    this.phantomRequest.post('Page.InjectJS', { fileName: fileName }, next);
};

WebPage.prototype.canGoBack = function(next) {
    this.phantomRequest.post('Page.CanGoBack', next);
};

WebPage.prototype.canGoForward = function(next) {
    this.phantomRequest.post('Page.CanGoForward', next);
};

WebPage.prototype.goBack = function(next) {
    this.phantomRequest.post('Page.GoBack', next);
};

WebPage.prototype.goForward = function(next) {
    this.phantomRequest.post('Page.GoForward', next);
};

WebPage.prototype.reload = function(next) {
    this.phantomRequest.post('Page.Reload', next);
};

WebPage.prototype.stop = function(next) {
    this.phantomRequest.post('Page.Stop', next);
};

WebPage.prototype.sendMouseEvent = function(eventType, mouseX, mouseY, button, next) {
    var param = {
        eventType: eventType,
        mouseX: mouseX,
        mouseY: mouseY
    };
    if (typeof button === 'function') {
        next = button;
    } else {
        param.button = button;
    }
    this.phantomRequest.post('Page.SendMouseEvent', param, next);
};

WebPage.prototype.sendKeyboardEvent = function(eventType, keys, modifier, next) {
    var param = {
        eventType: eventType,
        keys: keys
    };
    if (typeof modifier === 'function') {
        next = modifier;
    } else {
        param.modifier = modifier;
    }
    this.phantomRequest.post('Page.SendKeyboardEvent', param, next);
};

WebPage.prototype.evaluate = function(func, args, next) {
    var param = { func: func.toString() };
    if (typeof args === 'function') {
        next = args;
    } else if (typeof args !== 'undefined') {
        param.args = JSON.stringify(args);
    }
    this.phantomRequest.post('Page.Evaluate', param, next);
};

WebPage.prototype.evaluateAsync = function(func, args, next) {
    var param = { func: func.toString() };
    if (typeof args === 'function') {
        next = args;
    } else if (typeof args !== 'undefined') {
        param.args = JSON.stringify(args);
    }
    this.phantomRequest.post('Page.EvaluateAsync', param, next);
};

WebPage.prototype.setConfirmCallback = function(msg, accept, next) {
    var param = {
        message: msg,
        accept: accept
    };
    this.phantomRequest.post('Page.SetConfirmCallback', param, next);
};

WebPage.prototype.setPromptCallback = function(msg, value, next) {
    var param = {
        message: msg,
        value: value
    };
    this.phantomRequest.post('Page.SetPromptCallback', param, next);
};

WebPage.prototype.hasElement = function(selector, type, next) {
    if (type === 'css3') {
        this.evaluate(function(selector) {
            return document.querySelector(selector) !== null;
        }, selector, next);
    } else if (type === 'xpath') {
        this.evaluate(function(selector) {
            var elem = document.evaluate(selector, document, null, XPathResult.ANY_TYPE, null);
            return elem.iterateNext() !== null;
        }, selector, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

WebPage.prototype.getHTML = function(next) {
    this.evaluate(function() {
        return document.getElementsByTagName('html')[0].innerHTML;
    }, next);
};

WebPage.prototype.getTextContent = function(selector, type, next) {
    if (type === 'css3') {
        this.evaluate(function(selector) {
            var elem = document.querySelector(selector);
            if (elem !== null) {
                return elem.textContent;
            }
            return null;
        }, selector, next);
    } else if (type === 'xpath') {
        this.evaluate(function(selector) {
            var xpath = document.evaluate(selector, document, null, XPathResult.ANY_TYPE, null);
            elem = xpath.iterateNext();
            if (elem) {
                var result = [];
                while (elem) {
                    result.push(elem.textContent);
                    elem = xpath.iterateNext();
                }
                return result.length > 1 ? result : result[0];
            }
            return null;
        }, selector, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

WebPage.prototype.getAttribute = function(selector, type, attrName, next) {
    if (type === 'css3') {
        this.evaluate(function(args) {
            var elem = document.querySelector(args.selector);
            if (elem !== null) {
                return elem.getAttribute(args.attrName);
            }
            return null;
        }, {
            selector: selector,
            attrName: attrName
        }, next);
    } else if (type === 'xpath') {
        this.evaluate(function(args) {
            var xpath = document.evaluate(args.selector, document, null, XPathResult.ANY_TYPE, null);
            elem = xpath.iterateNext();
            if (elem) {
                var result = [];
                while (elem) {
                    result.push(elem.getAttribute(args.attrName));
                    elem = xpath.iterateNext();
                }
                return result.length > 1 ? result : result[0];
            }
            return null;
        }, {
            selector: selector,
            attrName: attrName
        }, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

WebPage.prototype.getTable = function(selector, type, next) {
    if (type === 'css3') {
        this.evaluate(function(selector) {
            var table = window.document.querySelector(selector);
            if (table) {
                var result = { head: [], body: [] };
                var rows = table.querySelectorAll('tr');
                for (var i = 0; i < rows.length; i++) {
                    var bodies = rows[i].querySelectorAll('td');
                    var j;
                    if (bodies.length > 0) {
                        var data = [];
                        for (j = 0; j < bodies.length; j++) {
                            data.push(bodies[j].textContent);
                        }
                        result.body.push(data);
                    } else {
                        var heads = rows[i].querySelectorAll('th');
                        for (j = 0; j < heads.length; j++) {
                            result.head.push(heads[j].textContent);
                        }
                    }
                }
                return result;
            }
            return null;
        }, selector, next);
    } else if (type === 'xpath') {
        this.evaluate(function(selector) {
            var tablePath = document.evaluate(selector, document, null, XPathResult.ANY_TYPE, null);
            var table = tablePath.iterateNext();
            if (table) {
                var result = { head: [], body: [] };
                var rowPath = document.evaluate('.//tr', table, null, XPathResult.ANY_TYPE, null);
                var row = rowPath.iterateNext();
                while (row) {
                    var bodyPath = document.evaluate('.//td', row, null, XPathResult.ANY_TYPE, null);
                    var body = bodyPath.iterateNext();
                    if (body) {
                        var data = [];
                        while (body) {
                            data.push(body.textContent);
                            body = bodyPath.iterateNext();
                        }
                        result.body.push(data);
                    } else {
                        var headPath = document.evaluate('.//th', row, null, XPathResult.ANY_TYPE, null);
                        var head = headPath.iterateNext();
                        while (head) {
                            result.head.push(head.textContent);
                            head = headPath.iterateNext();
                        }
                    }
                    row = rowPath.iterateNext();
                }
                return result;
            }
            return null;           
        }, selector, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

WebPage.prototype.clickElement = function(selector, type, next) {
    if (type == 'css3') {
        this.evaluate(function(selector) {
            var elem = document.querySelector(selector);
            if (elem) {
                var pos = elem.getBoundingClientRect();
                var x = Math.floor((pos.left + pos.right) / 2);
                var y = Math.floor((pos.top + pos.bottom) / 2);
                var evt = document.createEvent('MouseEvents');
                evt.initMouseEvent('click', true, true, window, 1, 1, 1, x, y, false, false, false, false, 0, elem);
                elem.dispatchEvent(evt);
                return true;
            }
            return false;
        }, selector, next);
    } else if (type == 'xpath') {
        this.evaluate(function(selector) {
            var elem = document.evaluate(selector, document, null, XPathResult.ANY_TYPE, null);
            elem = elem.iterateNext();
            if (elem) {
                var pos = elem.getBoundingClientRect();
                var x = Math.floor((pos.left + pos.right) / 2);
                var y = Math.floor((pos.top + pos.bottom) / 2);
                var evt = document.createEvent('MouseEvents');
                evt.initMouseEvent('click', true, true, window, 1, 1, 1, x, y, false, false, false, false, 0, elem);
                elem.dispatchEvent(evt);
                return true;
            }
            return false;
        }, selector, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

WebPage.prototype.submitForm = function(selector, type, fields, next) {
    if (type === 'css3') {
        this.evaluate(function(args) {
            var form = document.querySelector(args.selector);
            if (form) {
                for (var i in args.fields) {
                    var field = form.querySelector('input[name="' + i + '"]');
                    field.focus();
                    field.value = args.fields[i];
                }
                var evt = document.createEvent('Event');
                evt.initEvent('submit', true, true);
                if (form.dispatchEvent(evt)) {
                    if (typeof form.submit === 'function') {
                        form.submit();
                    } else {
                        form.submit.click();
                    }
                    return true;
                }
            }
            return false;
        }, {
            selector: selector,
            fields: fields
        }, next);
    } else if (type === 'xpath') {
        this.evaluate(function(args) {
            var form = document.evaluate(args.selector, document, null, XPathResult.ANY_TYPE, null);
            form = form.iterateNext();
            if (form) {
                for (var i in args.fields) {
                    var field = form.querySelector('input[name="' + i + '"]');
                    field.value = args.fields[i];
                }
                var evt = document.createEvent('Event');
                evt.initEvent('submit', true, true);
                if (form.dispatchEvent(evt)) {
                    if (typeof form.submit === 'function') {
                        form.submit();
                    } else {
                        form.submit.click();
                    }
                    return true;
                }
            }
            return false;
        }, {
            selector: selector,
            fields: fields
        }, next);
    } else {
        next(new Error('Unknown selector type'));
    }
};

module.exports = WebPage;
